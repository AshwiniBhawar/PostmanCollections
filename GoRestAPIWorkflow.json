{
	"info": {
		"_postman_id": "72e4583f-5be4-4bd8-8b6b-1debbabdf036",
		"name": "GoRestAPIWorkflow",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "32521370"
	},
	"item": [
		{
			"name": "1-GetAllUsers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseURL}}/public/v2/users"
			},
			"response": []
		},
		{
			"name": "2-CreateAUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json=pm.response.json();\r",
							"const userid=json.id;\r",
							"console.log(\"user id is: \"+userid);\r",
							"pm.variables.set(\"userID\", userid);\r",
							"//local variable ---userID\r",
							"\r",
							"//testcase1\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//testcase2\r",
							"pm.test(\"Check the user status\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"active\");\r",
							"});\r",
							"\r",
							"//testcase3\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFirstName}} {{$randomLastName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/public/v2/users"
			},
			"response": []
		},
		{
			"name": "3-GetAUserByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//testcase1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//testcase2\r",
							"pm.test(\"Check userid is correct\", function () {\r",
							"    const userid=pm.variables.get(\"userID\");\r",
							"    const jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(userid);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"url": "{{BaseURL}}/public/v2/users/{{userID}}"
			},
			"response": []
		},
		{
			"name": "4-UpdateAUserByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//testcase1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//testcase2\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"//testcase3\r",
							"pm.test(\"Check the status\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"inactive\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"inactive\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/public/v2/users/{{userID}}"
			},
			"response": []
		},
		{
			"name": "5-GetAUpdatedUserByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//testcase1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//testcase2\r",
							"pm.test(\"Check userid is correct\", function () {\r",
							"    const userid=pm.variables.get(\"userID\");\r",
							"    const jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(userid);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"url": "{{BaseURL}}/public/v2/users/{{userID}}"
			},
			"response": []
		},
		{
			"name": "6-DeleteAUserByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//testcase1\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"url": "{{BaseURL}}/public/v2/users/{{userID}}"
			},
			"response": []
		},
		{
			"name": "7-GetADeletedUserByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//testcase1\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"url": "{{BaseURL}}/public/v2/users/{{userID}}"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}